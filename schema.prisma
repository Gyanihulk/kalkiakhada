// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      String            @id @default(cuid())
  name                    String            @default("")
  email                   String            @unique @default("")
  password                String
  about                   Json              @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  avatar                  Asset?            @relation("User_avatar", fields: [avatarId], references: [id])
  avatarId                String?           @map("avatar")
  contactNumber           String            @default("")
  userType                UserUserTypeType?
  role                    Role?             @relation("User_role", fields: [roleId], references: [id])
  roleId                  String?           @map("role")
  asset                   Asset?            @relation("Asset_author")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?
  from_Collection_author  Collection[]      @relation("Collection_author")

  @@index([avatarId])
  @@index([roleId])
}

model Asset {
  id               String           @id @default(cuid())
  file_filesize    Int?
  file_mode        String?
  file_filename    String?
  folder           AssetFolderType?
  altTitle         String           @default("")
  caption          String           @default("")
  status           AssetStatusType?
  author           User?            @relation("Asset_author", fields: [authorId], references: [id])
  authorId         String?          @unique @map("author")
  tags             Tag[]            @relation("Asset_tags")
  dateCreated      DateTime?        @default(now())
  dateUpdated      DateTime?        @default(now()) @updatedAt
  from_User_avatar User[]           @relation("User_avatar")
}

model Role {
  id               String    @id @default(cuid())
  name             String    @default("")
  handle           String    @default("")
  description      String    @default("")
  permissions      Boolean   @default(false)
  dateCreated      DateTime? @default(now())
  dateUpdated      DateTime? @default(now()) @updatedAt
  canSeeOtherUsers Boolean   @default(false)
  canManageUsers   Boolean   @default(false)
  canManageRoles   Boolean   @default(false)
  canReadListing   Boolean   @default(false)
  canManageListing Boolean   @default(false)
  canManageAnimal  Boolean   @default(false)
  canManageArticle Boolean   @default(false)
  canManageEvent   Boolean   @default(false)
  canManagePage    Boolean   @default(false)
  canManageTrait   Boolean   @default(false)
  assignedTo       User[]    @relation("User_role")
}

model Category {
  id          String    @id @default(cuid())
  title       String    @default("")
  handle      String    @default("")
  dateCreated DateTime? @default(now())
  dateUpdated DateTime? @default(now()) @updatedAt
}

model Collection {
  id          String                @id @default(cuid())
  title       String                @default("")
  handle      String                @default("")
  author      User?                 @relation("Collection_author", fields: [authorId], references: [id])
  authorId    String?               @map("author")
  status      CollectionStatusType?
  tags        Tag[]                 @relation("Collection_tags")
  dateCreated DateTime?             @default(now())
  dateUpdated DateTime?             @default(now()) @updatedAt

  @@index([authorId])
}

model Structure {
  id               String    @id @default(cuid())
  name             String    @default("")
  handle           String    @default("")
  structure        Json?
  dateCreated      DateTime? @default(now())
  dateUpdated      DateTime? @default(now()) @updatedAt
  from_Tag_tagType Tag[]     @relation("Tag_tagType")
}

model Tag {
  id                   String       @id @default(cuid())
  title                String       @default("")
  handle               String       @default("")
  tagType              Structure?   @relation("Tag_tagType", fields: [tagTypeId], references: [id])
  tagTypeId            String?      @map("tagType")
  dateCreated          DateTime?    @default(now())
  dateUpdated          DateTime?    @default(now()) @updatedAt
  from_Asset_tags      Asset[]      @relation("Asset_tags")
  from_Collection_tags Collection[] @relation("Collection_tags")

  @@index([tagTypeId])
}

enum UserUserTypeType {
  trainer
  gymOwner
  trainee
}

enum AssetFolderType {
  active
  inactive
}

enum AssetStatusType {
  active
  inactive
}

enum CollectionStatusType {
  active
  inactive
}